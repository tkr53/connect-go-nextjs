// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file greet.proto (package greet.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message greet.v1.GreetRequest
 */
export class GreetRequest extends Message<GreetRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GreetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "greet.v1.GreetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GreetRequest {
    return new GreetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GreetRequest {
    return new GreetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GreetRequest {
    return new GreetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GreetRequest | PlainMessage<GreetRequest> | undefined, b: GreetRequest | PlainMessage<GreetRequest> | undefined): boolean {
    return proto3.util.equals(GreetRequest, a, b);
  }
}

/**
 * @generated from message greet.v1.GreetResponse
 */
export class GreetResponse extends Message<GreetResponse> {
  /**
   * @generated from field: string greeting = 1;
   */
  greeting = "";

  constructor(data?: PartialMessage<GreetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "greet.v1.GreetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "greeting", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GreetResponse {
    return new GreetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GreetResponse {
    return new GreetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GreetResponse {
    return new GreetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GreetResponse | PlainMessage<GreetResponse> | undefined, b: GreetResponse | PlainMessage<GreetResponse> | undefined): boolean {
    return proto3.util.equals(GreetResponse, a, b);
  }
}

/**
 * @generated from message greet.v1.GreetBidiStreamRequest
 */
export class GreetBidiStreamRequest extends Message<GreetBidiStreamRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GreetBidiStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "greet.v1.GreetBidiStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GreetBidiStreamRequest {
    return new GreetBidiStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GreetBidiStreamRequest {
    return new GreetBidiStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GreetBidiStreamRequest {
    return new GreetBidiStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GreetBidiStreamRequest | PlainMessage<GreetBidiStreamRequest> | undefined, b: GreetBidiStreamRequest | PlainMessage<GreetBidiStreamRequest> | undefined): boolean {
    return proto3.util.equals(GreetBidiStreamRequest, a, b);
  }
}

/**
 * @generated from message greet.v1.GreetBidiStreamResponse
 */
export class GreetBidiStreamResponse extends Message<GreetBidiStreamResponse> {
  /**
   * @generated from field: string greeting = 1;
   */
  greeting = "";

  constructor(data?: PartialMessage<GreetBidiStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "greet.v1.GreetBidiStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "greeting", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GreetBidiStreamResponse {
    return new GreetBidiStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GreetBidiStreamResponse {
    return new GreetBidiStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GreetBidiStreamResponse {
    return new GreetBidiStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GreetBidiStreamResponse | PlainMessage<GreetBidiStreamResponse> | undefined, b: GreetBidiStreamResponse | PlainMessage<GreetBidiStreamResponse> | undefined): boolean {
    return proto3.util.equals(GreetBidiStreamResponse, a, b);
  }
}

